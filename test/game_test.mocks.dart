// Mocks generated by Mockito 5.4.2 from annotations
// in scopa_lib/test/game_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:scopa_lib/src/scopa_round.dart' as _i2;
import 'package:scopa_lib/tabletop_lib.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ScopaRound].
///
/// See the documentation for Mockito's code generation for more information.
class MockScopaRound extends _i1.Mock implements _i2.ScopaRound {
  @override
  List<_i3.Player> get players => (super.noSuchMethod(
        Invocation.getter(#players),
        returnValue: <_i3.Player>[],
        returnValueForMissingStub: <_i3.Player>[],
      ) as List<_i3.Player>);

  @override
  set players(List<_i3.Player>? _players) => super.noSuchMethod(
        Invocation.setter(
          #players,
          _players,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<_i3.Player, _i3.Hand> get playerHands => (super.noSuchMethod(
        Invocation.getter(#playerHands),
        returnValue: <_i3.Player, _i3.Hand>{},
        returnValueForMissingStub: <_i3.Player, _i3.Hand>{},
      ) as Map<_i3.Player, _i3.Hand>);

  @override
  Map<_i3.Player, _i3.Hand> get captureHands => (super.noSuchMethod(
        Invocation.getter(#captureHands),
        returnValue: <_i3.Player, _i3.Hand>{},
        returnValueForMissingStub: <_i3.Player, _i3.Hand>{},
      ) as Map<_i3.Player, _i3.Hand>);

  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
